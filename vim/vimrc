syntax on
set nu
set ruler
set smartindent
set splitbelow
set hidden
set expandtab
set tabstop=4
set shiftwidth=4
set encoding=UTF-8
set background=dark
set signcolumn=number
set backspace=indent,eol,start
highlight Visual cterm=bold ctermbg=darkgrey
highlight SignColumn ctermbg=darkgrey
autocmd InsertLeave * se nocul
autocmd InsertEnter * se cul
let g:netrw_bufsettings = 'noma nomod nu nobl nowrap ro'
inoremap jj <Esc>

" Buffer move
set wildmenu wildmode=full
set wildchar=<Tab> wildcharm=<C-Z>
map <F10> <C-^>

" Enable folding
set foldmethod=indent
set foldlevel=99
nnoremap <space> za

" vim-plug
call plug#begin()

Plug 'airblade/vim-gitgutter'
Plug 'powerline/powerline', {'rtp': 'powerline/bindings/vim/'}

Plug 'Chiel92/vim-autoformat'
Plug 'jiangmiao/auto-pairs'

Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

Plug 'sillybun/vim-repl'
Plug 'preservim/nerdcommenter'

Plug 'skywind3000/asynctasks.vim'
Plug 'skywind3000/asyncrun.vim'

Plug 'ycm-core/YouCompleteMe'
Plug 'dense-analysis/ale'
Plug 'Vimjas/vim-python-pep8-indent'
Plug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' }

Plug 'roxma/vim-tmux-clipboard'

call plug#end()

" Powerline
set laststatus=2
set showtabline=2
set noshowmode

" Autoformat
" au BufWrite * :Autoformat
noremap <F3> :Autoformat<CR>
autocmd FileType vim,tex let b:autoformat_autoindent=0
let g:formatter_yapf_style = 'pep8'
let r_indent_align_args = 0
let g:formatdef_astyle_c = '"astyle --mode=c --style=google"'
let g:formatters_c = ['astyle_c']
let g:formatters_cpp = ['astyle_c']

" YCM
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_autoclose_preview_window_after_completion = 1

" asyncrun.vim
let g:asyncrun_open = 6
let g:asynctasks_term_pos = 'quickfix'
let g:asynctasks_term_reuse = 1
noremap <silent><F5> :AsyncTask file-run<cr>
noremap <silent><F9> :AsyncTask file-build<cr>

" vim-repl
nnoremap <leader>r :REPLToggle<Cr>
nnoremap <leader>e :REPLSendSession<Cr>
let g:repl_python_pre_launch_command = 'source venv/bin/activate'
let g:repl_program = {
            \   'python': 'ptpython',
            \   'default': 'zsh',
            \   'r': 'R --no-save',
            \   'lua': 'lua'
            \   }
let g:repl_predefine_python = {
            \   'numpy': 'import numpy as np',
            \   'pandas': 'import pandas as pd',
            \   'matplotlib': 'import matplotlib.pyplot as plt'
            \   }
let g:repl_exit_commands = {
            \   'ptpython': 'exit()',
            \   'radian': 'q()',
            \   'R': 'q()',
            \   'bash': 'exit',
            \   'zsh': 'exit',
            \   'default': 'exit'
            \   }
" let g:repl_position = 3 " for right
let g:repl_position = 0 " for bottom
let g:repl_console_name = 'REPL'
let g:repl_cursor_down = 1
let g:repl_python_auto_send_unfinish_line = 0
let g:repl_python_automerge = 1
let g:repl_python_auto_import = 0

" change repl position
:function Repl_change_position()
:   if g:repl_position == 0
:       let g:repl_position = 3
:   elseif g:repl_position == 3
:       let g:repl_position = 0
:   endif
:endfunction
:command ReplChangePosition :call Repl_change_position()
noremap <silent><F12> :ReplChangePosition<cr>

" ultisnips
let g:UltiSnipsExpandTrigger="<F1>"

" ALE
let g:ale_r_lintr_options = "with_defaults(camel_case_linter = NULL)"
let g:ale_r_lintr_options = "with_defaults(object_name_linter = NULL)"
let g:ale_python_flake8_options = '--config=$HOME/.config/flake8'
let g:ale_linters = {'python': ['flake8']}

" LeaderF
let g:Lf_WindowHeight = 0.30
noremap <leader>f :LeaderfSelf<cr>
noremap <leader>fl :LeaderfLine<cr>
noremap <leader>ft :LeaderfBufTag<cr>
noremap <leader>ff :LeaderfFile<cr>
noremap <leader>fu :LeaderfFunction<cr>
